const Homework = require('../models/homeworks')
var utc = require('dayjs/plugin/utc')
import dayjs from 'dayjs';

module.exports = {
    name: '–¥–∑',
    description: '–ø–æ–∫–∞–∂—É –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã',
    logo: "üìÅ",
    usage: "[–ø–∞—Ä–∞–º–µ—Ç—Ä]",
    aliases: [' –¥–∑', '–¥–æ–º–∞—à–∫–∞'],
    fullDescription: "—Ö—Ä–∞–Ω–∏ –≤—Å–µ —Å–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è/–¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä—è–º–æ –≤ –±–µ—Å–µ–¥–µ! –ë–æ—Ç —Å–∞–º —É–¥–∞–ª–∏—Ç" +
    " –¥–æ–º–∞—à–∫—É, –∫–æ–≥–¥–∞ –ø—Ä–æ–π–¥–µ—Ç –≤—Ä–µ–º—è. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n1. !–¥–∑ -- –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–∞—à–µ–∫\n" +
    "2. !–¥–∑ –¥–æ–±–∞–≤–∏—Ç—å [–¥–∞—Ç–∞] [–ø—Ä–µ–¥–º–µ—Ç] [–æ–ø–∏—Å–∞–Ω–∏–µ] -- –¥–æ–±–∞–≤–ª—é –≤ —Å–ø–∏—Å–æ–∫\n" +
    "3. !–¥–∑ —É–¥–∞–ª–∏—Ç—å [–ø—Ä–µ–¥–º–µ—Ç] -- —É–¥–∞–ª—é –∏–∑ —Å–ø–∏—Å–∫–∞\n" +
    "4. !–¥–∑ –∏–∑–º–µ–Ω–∏—Ç—å [–ø—Ä–µ–¥–º–µ—Ç] [–æ–ø–∏—Å–∞–Ω–∏–µ] -- –∏–∑–º–µ–Ω—é –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è",
    async execute(api: any, object: any, args: Array<string>) {

        function firstLetterCaps (str: string): string {
            return str.charAt(0).toUpperCase() + str.slice(1);
        }

        if (!args.length) {
            // Show HW
            
            let data: string = "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n"

            const homeworks = await Homework.find({ peer_id: object.peer_id }).lean()


            if (!homeworks.length) {
                return api.messagesSend({
                    peer_id: object.peer_id,
                    message: "–î–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç, –Ω–æ –Ω–∏—á–µ–≥–æ, —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç",
                    random_id: 0
                })
            }

            

            homeworks.forEach(async (hw: any) => {

                if (dayjs().isAfter(dayjs(hw.date), 'day')) {
                    await Homework.deleteOne({ date: hw.date })
                } else {
                    data += firstLetterCaps(hw.title) + " | –¥–æ " + 
                    dayjs(hw.date).format('DD.MM.YYYY') + "\n" + hw.description + "\n\n"
                }
            })

            return api.messagesSend({
                peer_id: object.peer_id,
                message: data,
                random_id: 0
            })

        } else {
            
            switch (args[0]) {
                case '–¥–æ–±–∞–≤–∏—Ç—å':

                    dayjs.extend(utc)
                    var customParseFormat = require('dayjs/plugin/customParseFormat')
                    dayjs.extend(customParseFormat)
                    let formatedDate: string = dayjs(args[1] + ".2020", 'DD.MM.YYYY').format('DD-MM-YYYY')
                    let DATE: string = dayjs(args[1] + ".2020", 'DD.MM.YYYY').format('YYYY-MM-DD')
                    

                    if (dayjs(formatedDate, "DD-MM-YYYY").isValid() == false || !dayjs().isBefore(dayjs(DATE))) {
                        return api.messagesSend({
                            peer_id: object.peer_id,
                            message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞—Ç—ã. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∞–Ω–¥–µ \"!–∏–Ω—Ñ–æ –¥–∑\"",
                            random_id: 0
                        })
                    }
                    
                    let params: Array<string> = args.splice(0, 3)

                    if (!args.length || !params[2]) {
                        return api.messagesSend({
                            peer_id: object.peer_id,
                            message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∞–Ω–¥–µ \"!–∏–Ω—Ñ–æ –¥–∑\"",
                            random_id: 0
                        })
                    }

                    const homeworks = await Homework.find({ title: params[2].toLowerCase() }).lean()

                    if (homeworks.length) {
                        return api.messagesSend({
                            peer_id: object.peer_id,
                            message: "–¢–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –µ—Å—Ç—å. –ú–æ–∂–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—à—å –µ–≥–æ? –ü–æ–ø—Ä–æ–±—É–π \"!–¥–∑ –∏–∑–º–µ–Ω–∏—Ç—å [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ç–µ–∫—Å—Ç]\"",
                            random_id: 0
                        })
                    }

                    await Homework.create({ 
                        peer_id: object.peer_id,
                        title: params[2].toLowerCase(),
                        description: args.join(' '),
                        date: DATE
                    });

                    return api.messagesSend({
                        peer_id: object.peer_id,
                        message: "–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ " + dayjs(DATE, 'YYYY.MM.DD').format('DD.MM.YYYY'),
                        random_id: 0
                    })

                    break;

                case '—É–¥–∞–ª–∏—Ç—å':

                    if (!args[1]) {
                        return api.messagesSend({
                            peer_id: object.peer_id,
                            message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∞–Ω–¥–µ \"!–∏–Ω—Ñ–æ –¥–∑\"",
                            random_id: 0
                        })
                    } 

                    const hw = await Homework.deleteOne({ title: args[1].toLowerCase() })
                    if (hw.n) {
                        return api.messagesSend({
                            peer_id: object.peer_id,
                            message: "–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
                            random_id: 0
                        })
                    } else {
                        return api.messagesSend({
                            peer_id: object.peer_id,
                            message: "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                            random_id: 0
                        })
                    }

                    break;

                case '–∏–∑–º–µ–Ω–∏—Ç—å':

                    if (!args[1]) {
                        return api.messagesSend({
                            peer_id: object.peer_id,
                            message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∞–Ω–¥–µ \"!–∏–Ω—Ñ–æ –¥–∑\"",
                            random_id: 0
                        })
                    } 

                    if (!args[2]) {
                        return api.messagesSend({
                            peer_id: object.peer_id,
                            message: "–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∞–Ω–¥–µ \"!–∏–Ω—Ñ–æ –¥–∑\"",
                            random_id: 0
                        })
                    } 

                    params = args.splice(0, 2)
                    await Homework.findOneAndUpdate({ title: params[1].toLowerCase() }, {
                        description: args.join(' ')
                    }, async (err: any, doc: any) => {
                        if (!doc) {
                            return api.messagesSend({
                                peer_id: object.peer_id,
                                message: "–¢–∞–∫–æ–π –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∞–Ω–¥–µ \"!–∏–Ω—Ñ–æ –¥–∑\"",
                                random_id: 0
                            })
                        } else {
                            return api.messagesSend({
                                peer_id: object.peer_id,
                                message: "–ó–∞–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ :)",
                                random_id: 0
                            })
                        }
                    })
                    


                    break;

                default:
                    return api.messagesSend({
                        peer_id: object.peer_id,
                        message: "–ü–æ—Ö–æ–∂–µ —Ç—ã –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ... –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∞–Ω–¥–µ \"!–∏–Ω—Ñ–æ –¥–∑\"",
                        random_id: 0
                    })
                    break;
            }
        }



    },
};